1 - Entendendo Termologias e conceitos.

    - Classe
    - Objeto
    - Instanciação
    - Atributos 
    - Métodos
    - encapsulamento
    - Heranças
    - polimorfismo
    - Abstração
    

2 - O que são atributos da classe? 
    
    Vamos começar entendendo o que são atributos de uma classe.
    
    Os atributos são propriedades e características de uma determinada classe

    Exemplo:

        class Pessoa:
            
            def __init__(self, nome, idade):  # Método construtor
                self.nome = nome  # Atributo da classe
                self.idade = idade  # Atributo da classe
    
    - O método construtor podemos definir parâmetros para instanciar uma classe

3 - O que são métodos da classe?

    Os métodos são ações que a classe irá fazer, basicamente os métodos são as funções
    da programação processual, essas funções definem o comportamento das classes

    Lembre-se: Programação é uma lista de instruções lógicas que o computador irá fazer 
    de forma processual, é o passo a passo.

    Exemplo:
        
        # Definindo uma classe
        class Pessoa:
            def __init__(self, nome, idade):  # Método construtor
                self.nome = nome  # Atributo da classe
                self.idade = idade  # Atributo da classe

            def apresentar(self):  # Método da classe (Ação)
                print(f"Olá, meu nome é {self.nome} e eu tenho {self.idade} anos.")

4 - Atributos vs Métodos:

    Resumidamente, a grosso modo: Atributos é aquilo que a classe tem e os Métodos é 
    aquilo que a classe faz.

5 - O que são Heranças em POO?

    Heranças é a capacidade de uma classe herdar propriedades e características de outras
    classe

    Exemplo:
    
    class Veiculo:
        def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo

        def exibir_info(self):
        print(f"Veículo: {self.marca} {self.modelo}")

        class Carro(Veiculo):  # Carro herda de Veiculo
            def __init__(self, marca, modelo, portas):
                super().__init__(marca, modelo)  # Chamando o construtor da classe pai
                self.portas = portas

        def exibir_info(self):  # Sobrescrevendo método
            print(f"Carro: {self.marca} {self.modelo} com {self.portas} portas")

    if __name__ == "main":
        
        # Criando objetos
        carro = Carro("Toyota", "Corolla", 4)
        carro.exibir_info()


6 - Como funciona a Instanciação de uma Classe?
    
    Agora vamos entender a principal diferença entre Objeto e Classe

    Classe: é o conceito, uma forma, é como se fosse uma planta na arquitetura, ou seja
    podemos definir que a classe ainda não existe é apenas ideia do que aquilo pode ser

    Dentro desta classe temos atributos e métodos

    Objeto: É a materialização de uma classe, é pegar a planta e transformar em uma casa,
    prédio, ou seja, concretizar aquela planta.

    Exemplo:
        
        # Definindo uma classe
        class Pessoa:
            def __init__(self, nome, idade):  # Método construtor
                self.nome = nome  # Atributo da classe
                self.idade = idade  # Atributo da classe

        def apresentar(self):  # Método da classe
            print(f"Olá, meu nome é {self.nome} e eu tenho {self.idade} anos.")

    # Executar apenas se o arquivo for o script principal
    if __name__ == "__main__":
        # Criando objetos
        pessoa1 = Pessoa("Alice", 30)
        pessoa2 = Pessoa("João", 25)

        # Chamando métodos
        pessoa1.apresentar()
        pessoa2.apresentar()


    OBSERVAÇÃO -> if __name__ == "__main__":

        É usado para garantir que um bloco de código seja executado apenas quando o script
        for executado diretamente. Quando o arquivo é importado como módulo, o código
        dentro desse bloco não será executado.   


7 - Classes no python

    Basicamente tudo em python são classes, visto que esta é uma linguagem de alto nível
    e abstraida. Se você criar uma variável e atribuir a ela um valor inteiro, float ou 
    string, e usar as funções type() e dir(), você vai adquirir informações desta
    variável retornando como uma classe se usar a função type e informações de todos os
    métodos/ações que essa classe pode fazer se usar a função dir()

    Exemplo:

        print(type(1))
        print(type('Amor'))
        print(type(pessoa1))

        Saida:
            <class 'int'>
            <class 'str'>
            <class '__main__.Pessoa'>

8 - polimorfismo em POO

    É Capacidade de objetos de diferentes classes responderem de maneira diferente
    a uma mesma chamada de método

    Exemplo:
        
        class Forma:
            def area(self):
                pass

        class Quadrado(Forma):
            def __init__(self, lado):
                self.lado = lado

            def area(self):
                return self.lado ** 2

        class Circulo(Forma):
            def __init__(self, raio):
                self.raio = raio

            def area(self):
                import math
                return math.pi * self.raio ** 2

        # Usando polimorfismo
        if __name__ == "__main__":
        
            formas = [Quadrado(4), Circulo(3)]
            for forma in formas:
                print(f"Área: {forma.area()}")

9 - Abstração
   
    Uma classe abstrata é uma classe que serve como base para outras classes e que não
    pode ser instanciada diretamente. Ela é usada para fornecer uma estrutura
    (ou interface) comum para suas subclasses, mas deixa a implementação de certos métodos
    para ser definida pelas subclasses.

    Classes abstratas são frequentemente usadas em situações onde diferentes classes
    compartilham características gerais, mas possu  em implementações específicas.


    Em python usamos classe abstrata da seguinye forma:

    Definida usando o módulo abc:

        O Python utiliza o módulo abc (Abstract Base Classes) para criar classes abstratas.
        Uma classe é abstrata se herda de ABC (uma metaclasse). 
        
        Usa-se Métodos abstratos:

            Contém métodos declarados, mas sem implementação. Eles são decorados com
            @abstractmethod. Subclasses devem obrigatoriamente implementar todos os
            métodos abstratos para serem instanciáveis.

        Não pode ser instanciada:

        Tentar criar um objeto diretamente de uma classe abstrata gera um erro.
        
        Pode ter métodos e atributos concretos:

            Além de métodos abstratos, uma classe abstrata pode conter métodos e atributos
            com implementação padrão, que podem ser compartilhados ou sobrescritos pelas
            subclasses.

    Exemplo:

        from abc import ABC, abstractmethod

        # Classe abstrata
        class Forma(ABC):
            @abstractmethod
            def calcular_area(self):
                """Método abstrato que deve ser implementado pelas subclasses"""
                pass

            @abstractmethod
            def calcular_perimetro(self):
                """Outro método abstrato"""
                pass

        # Subclasse concreta
        class Retangulo(Forma):
            def __init__(self, largura, altura):
                self.largura = largura
                self.altura = altura

            def calcular_area(self):
                return self.largura * self.altura

            def calcular_perimetro(self):
                return 2 * (self.largura + self.altura)

        # Subclasse concreta
        class Circulo(Forma):
            def __init__(self, raio):
                self.raio = raio

            def calcular_area(self):
                return 3.14 * self.raio**2

            def calcular_perimetro(self):
                return 2 * 3.14 * self.raio

10 - métodos abstratos

    Um método abstrato é aquele que é declarado em uma classe abstrata, mas não possui
    implementação na classe base. As classes que herdam da classe abstrata são obrigadas
    a implementar todos os métodos abstratos.