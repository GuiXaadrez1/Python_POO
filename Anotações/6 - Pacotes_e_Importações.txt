1 - O que são Pacotes?
    
    Em Python, pacotes são uma maneira de organizar e estruturar o código em módulos e
    subpacotes. Um pacote é essencialmente um diretório que contém um arquivo especial
    chamado __init__.py, além de outros módulos Python (arquivos .py).
    Ele é usado para organizar o código em hierarquias lógicas, 
    facilitando o gerenciamento e reutilização.

2 - Estrutura de um Pacote:

    meu_pacote/
    │
    ├── __init__.py          # Arquivo para inicializar o pacote
    ├── modulo1.py           # Um módulo do pacote
    ├── modulo2.py           # Outro módulo do pacote
    └── subpacote/           # Subpacote dentro do pacote
        ├── __init__.py
        └── modulo3.py

    I - __init__.py:

        Necessário para que o Python trate o diretório como um pacote.
        Pode estar vazio ou conter código para inicializar o 
        pacote (ex.: importar partes do pacote).

3 - Importação de Pacotes:

    Python permite importar pacotes inteiros ou módulos específicos. Abaixo estão
    diferentes formas de fazer isso:

        I. Importando um Módulo do Pacote

            import meu_pacote.modulo1

            meu_pacote.modulo1.funcao()  # Chamando uma função dentro do módulo

        II. Importando uma Função ou Classe Específica de um Módulo

            from meu_pacote.modulo1 import funcao

            funcao()  # Não é necessário prefixar com `meu_pacote.modulo1`

        III. Importando Tudo de um Módulo

            from meu_pacote.modulo1 import *

            funcao1()
            funcao2()

        IV. Importando com Alias
            
            import meu_pacote.modulo1 as m1

            m1.funcao()  # Usando o alias `m1` para acessar o módulo

        V. Importando de um Subpacote

            from meu_pacote.subpacote.modulo3 import funcao_sub

            funcao_sub()

4 - Quando podemos colocar Código no __init__.py ?

    Colocar código no arquivo __init__.py deve ser feito com cuidado, pois ele serve
    principalmente para inicializar o pacote, e adicionar código desnecessário pode causar
    problemas, como tempos de inicialização mais longos ou dependências inesperadas. 
    
    I - Facilitar Importações (Exportação de Módulos ou Funções)
       
        # Estrutura do pacote
        meu_pacote/
        ├── __init__.py
        ├── modulo1.py
        └── modulo2.py
    
    (A) - modulos dos pacote e suas repectivas funções:
        
        modulo1.py:
        
            def funcao1():
                print("Função 1 do módulo 1")
        
        modulo2.py: 
            def funcao2():
                print("Função 2 do módulo 2")

    (B) - Colocando os módulos dentro do __init__.py 

        from .modulo1 import funcao1
        from .modulo2 import funcao2

    II -  Inicialização do Pacote

        Se o pacote precisar executar algum código de configuração ou inicialização
        quando for importado, você pode incluir isso no __init__.py.

        Exemplo:

            # __init__.py
             print("Pacote 'meu_pacote' inicializado")

        # Uso:
            
            import meu_pacote
        
        # Saída: "Pacote 'meu_pacote' inicializado"
        
        ⚠ Cuidado: Evite executar código pesado ou dependente de muitas bibliotecas no
        __init__.py, pois isso será executado toda vez que o pacote for importado.

    III - Definir Variáveis Globais do Pacote
        
        Se houver variáveis ou constantes que precisam ser acessíveis globalmente em todo
        o pacote, você pode defini-las no __init__.py.

        Exemplo:

            # __init__.py
                VERSAO = "1.0.0"
                AUTOR = "Seu Nome"
        
        Uso:

            from meu_pacote import VERSAO, AUTOR
            print(VERSAO)  # Saída: "1.0.0"

    IV - Registrar Plugins ou Extensões

        Se o pacote utiliza plugins, hooks ou um sistema modular, o __init__.py
        pode conter código para registrar esses componentes.

        Exemplo:

        # __init__.py
            from .plugins import registrar_plugins

           registrar_plugins()

    5. Gerenciar Imports Condicionais

        Se algumas partes do pacote são opcionais ou dependem de bibliotecas específicas,
        você pode configurar imports condicionais no __init__.py.

        Exemplo:

            # __init__.py
                try:
                    import numpy as np
                    HAS_NUMPY = True
                except ImportError:
                    HAS_NUMPY = False

5 - Boa Práticas do __init__.py:

    I - Manter Simplicidade:

        Use o __init__.py apenas para exportação de símbolos, inicialização leve ou
        configuração do pacote.

    II - Evitar Código Pesado:

        Não inclua lógica complexa ou dependências pesadas no __init__.py. Isso pode
        impactar o desempenho e dificultar a manutenção.

    III - Evitar Efeitos Colaterais:

        Código no __init__.py será executado automaticamente ao importar o pacote.
        Certifique-se de que isso não cause comportamentos inesperados.

    IV - Documentação:

        Inclua comentários ou docstrings no __init__.py para que outros desenvolvedores
        entendam seu propósito.
    
    V - Gerenciar Exportações com __all__:

        Controle quais partes do pacote podem ser importadas usando
        from meu_pacote import *:

            __all__ = ["funcao1", "funcao2"]

6 - Quando não colocar código ou lógica no __init__.py
    
    I - Lógica Complexa ou Repetitiva: Transfira para um módulo separado.

    II - Importações que Podem Não Ser Necessárias: Evite carregar módulos que só são
    usados em casos específicos.

    III - Para Evitar Erros de Importação Cíclica: Colocar muitos imports no
    __init__.py pode causar problemas em pacotes com dependências cíclicas.

7 - Criando e Usando Pacotes

    I. Estrutura de Exemplo:
        
        calculadora/
        ├── __init__.py
        ├── basico.py
        └── avancado.py

    II. basico.py:

        def soma(a, b):
            return a + b

        def subtracao(a, b):
            return a - b

    III - avancado.py:

        def potencia(base, expoente):
            return base ** expoente

    IV - __init__.py:

        from .basico import soma, subtracao
        from .avancado import potencia

    V. Usando o Pacote:

        # Importando o pacote completo
        import calculadora

        print(calculadora.soma(2, 3))       # Saída: 5
        print(calculadora.potencia(2, 3))  # Saída: 8

        # Importando funções específicas
        from calculadora import subtracao

        print(subtracao(10, 4))  # Saída: 6

8 - Boas Práticas para Pacotes e Importação

    I - Mantenha uma Estrutura Clara:

        Divida o código em módulos e subpacotes de forma lógica.
    
    II -Evite Importações Desnecessárias:

        Use from x import y com cuidado, pois isso pode causar conflitos de nome.

    III - Gerencie o Escopo de Exportação com __all__:
        
        - No __init__.py ou em qualquer módulo, defina quais símbolos devem ser exportados:

            __all__ = ["soma", "subtracao"]  # Apenas esses itens serão importados com *

    IV - Documente seu Pacote:

        Use docstrings em cada módulo e função para facilitar a manutenção.

    V - Use Nomes Significativos:

        Dê nomes claros e descritivos para pacotes, módulos e funções.